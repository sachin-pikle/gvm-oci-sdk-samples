<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <maven-jar-plugin.version>3.2.2</maven-jar-plugin.version>
    <native.maven.plugin.version>0.9.23</native.maven.plugin.version>
    <mainClass>com.gvm.samples.App</mainClass>
  </properties>
  <groupId>com.gvm.samples</groupId>
  <artifactId>my-app</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>my-app</name>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.oracle.oci.sdk</groupId>
        <artifactId>oci-java-sdk-bom</artifactId>
        <version>3.20.0</version> <!-- Compatible with Micronaut Oracle Cloud version 3.0.3 -->
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>io.micronaut.oraclecloud</groupId>
        <artifactId>micronaut-oraclecloud-bom</artifactId>
        <version>3.0.3</version> <!-- Compatible with OCI SDK version 3.20.0 -->
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <!-- Using Netty/Micronaut Serializer instead of Jersey -->
    <dependency>
      <groupId>io.micronaut.oraclecloud</groupId>
      <artifactId>micronaut-oraclecloud-httpclient-netty</artifactId>
    </dependency>
    <!-- Using the Micronaut Oracle Cloud module instead of the corresponding OCI SDK module. It contains the OCI SDK classes (bean introspections) generated by the reflection-free Micronaut Serializer plugin. For use with GraalVM Native Image. -->
    <dependency>
      <groupId>io.micronaut.oraclecloud</groupId>
      <artifactId>micronaut-oraclecloud-bmc-core</artifactId>
    </dependency>
    <!-- OCI SDK Compute module -->
    <dependency>
      <groupId>com.oracle.oci.sdk</groupId>
      <artifactId>oci-java-sdk-core</artifactId>
    </dependency>
    <!-- OCI SDK Addons for GraalVM Native Image reachability metadata. For use with GraalVM Native Image. -->
    <dependency>
      <groupId>com.oracle.oci.sdk</groupId>
      <artifactId>oci-java-sdk-addons-graalvm</artifactId>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${maven-jar-plugin.version}</version>
          <configuration>
              <archive>
                  <manifest>
                      <addClasspath>true</addClasspath>
                      <mainClass>${mainClass}</mainClass>
                  </manifest>
              </archive>
          </configuration>
      </plugin>
      <plugin>
          <artifactId>maven-assembly-plugin</artifactId>
          <configuration>
              <archive>
                  <manifest>
                      <addClasspath>true</addClasspath>
                      <mainClass>${mainClass}</mainClass>
                  </manifest>
              </archive>
              <descriptorRefs>
                  <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  
  <profiles>
    <profile>
      <id>native</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <version>${native.maven.plugin.version}</version>
            <extensions>true</extensions>
            <executions>
              <execution>
                <id>build-native</id>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
              </execution>
              <execution>
                <id>test-native</id>
                <goals>
                  <goal>test</goal>
                </goals>
                <phase>test</phase>
              </execution>
            </executions>
            <configuration>
              <mainClass>${mainClass}</mainClass>
              <imageName>${name}</imageName>
              <fallback>false</fallback>
              <verbose>true</verbose>
              <quickBuild>true</quickBuild>
              <buildArgs>
                <arg>-H:+ReportExceptionStackTraces</arg>
                <!-- MacOS doesn't support building static native executables. Comment this build arg on MacOS -->
                <!-- <arg>-H:+StaticExecutableWithDynamicLibC</arg> -->
                <arg>--enable-url-protocols=https,http</arg>
                <!-- AllowDeprecatedBuilderClassesOnImageClasspath is available in Oracle GraalVM for JDK 17 and above. Comment this build arg for older versions of GraalVM  -->
                <arg>-H:+AllowDeprecatedBuilderClassesOnImageClasspath</arg>
              </buildArgs>
              <!-- Start: Workaround for 22.2: Disable the default Java Module Path using USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM -->
              <environment>
                <USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM>false</USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM>
              </environment>
              <!-- End: Workaround for 22.2: Disable the default Java Module Path using USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM -->
              <metadataRepository>
                <enabled>true</enabled>
              </metadataRepository>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
