<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <fdk.version>1.0.175</fdk.version>
        <native.maven.plugin.version>0.9.23</native.maven.plugin.version>
    </properties>
    <groupId>com.example.fn</groupId>
    <artifactId>oci-list-instances-netty</artifactId>
    <version>1.0.0</version>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.oracle.oci.sdk</groupId>
                <artifactId>oci-java-sdk-bom</artifactId>
                <version>3.20.0</version> <!-- Compatible with Micronaut Oracle Cloud version 3.0.3 -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.micronaut.oraclecloud</groupId>
                <artifactId>micronaut-oraclecloud-bom</artifactId>
                <version>3.0.3</version> <!-- Compatible with OCI SDK version 3.20.0 -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.fnproject.fn</groupId>
            <artifactId>api</artifactId>
            <version>${fdk.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fnproject.fn</groupId>
            <artifactId>testing-core</artifactId>
            <version>${fdk.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fnproject.fn</groupId>
            <artifactId>testing-junit4</artifactId>
            <version>${fdk.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.fnproject.fn</groupId>
            <artifactId>runtime</artifactId>
            <version>${fdk.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- Using Netty/Micronaut Serializer instead of Jersey -->
        <dependency>
            <groupId>io.micronaut.oraclecloud</groupId>
            <artifactId>micronaut-oraclecloud-httpclient-netty</artifactId>
        </dependency>
    <!-- Using the Micronaut Oracle Cloud module instead of the corresponding OCI SDK module. It contains the OCI SDK classes (bean introspections) generated by the reflection-free Micronaut Serializer plugin. For use with GraalVM Native Image. -->
        <dependency>
            <groupId>io.micronaut.oraclecloud</groupId>
            <artifactId>micronaut-oraclecloud-bmc-core</artifactId>
        </dependency>
        <!-- OCI SDK Addons for GraalVM Native Image reachability metadata. For use with GraalVM Native Image. -->
        <dependency>
            <groupId>com.oracle.oci.sdk</groupId>
            <artifactId>oci-java-sdk-addons-graalvm</artifactId>
        </dependency>        
        <dependency>
            <groupId>com.sun.activation</groupId>
            <artifactId>jakarta.activation</artifactId>
            <version>1.2.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <useSystemClassLoader>false</useSystemClassLoader>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>native</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>${native.maven.plugin.version}</version>
                        <extensions>true</extensions>
                        <executions>
                        <execution>
                            <id>build-native</id>
                            <goals>
                            <goal>compile-no-fork</goal>
                            </goals>
                            <phase>package</phase>
                        </execution>
                        <execution>
                            <id>test-native</id>
                            <goals>
                            <goal>test</goal>
                            </goals>
                            <phase>test</phase>
                        </execution>
                        </executions>
                        <configuration>
                            <mainClass>com.fnproject.fn.runtime.EntryPoint</mainClass>
                            <imageName>func</imageName>
                            <fallback>false</fallback>
                            <verbose>true</verbose>
                            <quickBuild>true</quickBuild>
                            <buildArgs>
                                <arg>-H:+ReportExceptionStackTraces</arg>
                                <arg>-H:+StaticExecutableWithDynamicLibC</arg>
                                <arg>--enable-url-protocols=https,http</arg>
                                <arg>--report-unsupported-elements-at-runtime</arg>
                                <!-- AllowDeprecatedBuilderClassesOnImageClasspath is available in Oracle GraalVM for JDK 17 and above. Comment this build arg for older versions of GraalVM  -->
                                <arg>-H:+AllowDeprecatedBuilderClassesOnImageClasspath</arg>
                            </buildArgs>
                            <!-- Start: Workaround for 22.2: Disable the default Java Module Path using USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM -->
                            <environment>
                                <USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM>false</USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM>
                            </environment>
                            <!-- End: Workaround for 22.2: Disable the default Java Module Path using USE_NATIVE_IMAGE_JAVA_PLATFORM_MODULE_SYSTEM -->

                            <metadataRepository>
                                <enabled>true</enabled>
                            </metadataRepository>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
